knitr::opts_chunk$set(echo = TRUE)
# setwd("~/Google Drive/Other computers/My Mac/Documents/PhD_Research/GitHub/well-being")
library(bcp)
library(arrow)
library(dplyr)
feather_dir <- "feather_exports"
# files are in subdirectories of feather_dir: merged_nobcp
subdir <- "merged_nobcp"
feather_files <- list.files(file.path(feather_dir, subdir), full.names = TRUE)
pid_dates <- list()
for (file in feather_files) {
df <- arrow::read_feather(file)
# Parse participant ID and date from the file name
f <- tools::file_path_sans_ext(basename(file))
pid <- sub("^([^_]+).*", "\\1", f)
date <- sub("^.*_([^_]+)$", "\\1", f)
if (!(pid %in% names(pid_dates))) {
pid_dates[[pid]] <- list()
}
if (!(date %in% names(pid_dates[[pid]]))) {
pid_dates[[pid]][[date]] <- list()
}
# Extract only the date component from the datetime column
df$date <- as.Date(df$date)
# remove in_ll column using dplyr
df <- select(df, -in_ll)
pid_dates[[pid]][[date]] <- do.call(rbind, c(pid_dates[[pid]][[date]], list(df)))
}
for (pid in names(pid_dates)) {
numeric_dates <- as.numeric(names(pid_dates[[pid]]))
sorted_indices <- order(numeric_dates)
pid_dates[[pid]] <- pid_dates[[pid]][sorted_indices]
}
View(pid_dates)
View(pid_dates)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Google Drive/Other computers/My Mac/Documents/PhD_Research/GitHub/well-being")
library(bcp)
library(arrow)
library(dplyr)
feather_dir <- "feather_exports"
# files are in subdirectories of feather_dir: merged_nobcp
subdir <- "merged_nobcp"
feather_files <- list.files(file.path(feather_dir, subdir), full.names = TRUE)
pid_dates <- list()
for (file in feather_files) {
df <- arrow::read_feather(file)
# Parse participant ID and date from the file name
f <- tools::file_path_sans_ext(basename(file))
pid <- sub("^([^_]+).*", "\\1", f)
date <- sub("^.*_([^_]+)$", "\\1", f)
if (!(pid %in% names(pid_dates))) {
pid_dates[[pid]] <- list()
}
if (!(date %in% names(pid_dates[[pid]]))) {
pid_dates[[pid]][[date]] <- list()
}
# Extract only the date component from the datetime column
df$date <- as.Date(df$date)
# remove in_ll column using dplyr
df <- select(df, -in_ll)
pid_dates[[pid]][[date]] <- do.call(rbind, c(pid_dates[[pid]][[date]], list(df)))
}
for (pid in names(pid_dates)) {
numeric_dates <- as.numeric(names(pid_dates[[pid]]))
sorted_indices <- order(numeric_dates)
pid_dates[[pid]] <- pid_dates[[pid]][sorted_indices]
}
View(df)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Google Drive/Other computers/My Mac/Documents/PhD_Research/GitHub/well-being")
library(bcp)
library(arrow)
library(dplyr)
feather_dir <- "feather_exports"
# files are in subdirectories of feather_dir: merged_nobcp
subdir <- "merged_nobcp"
feather_files <- list.files(file.path(feather_dir, subdir), full.names = TRUE)
pid_dates <- list()
for (file in feather_files) {
df <- arrow::read_feather(file)
# Parse participant ID and date from the file name
f <- tools::file_path_sans_ext(basename(file))
pid <- sub("^([^_]+).*", "\\1", f)
date <- sub("^.*_([^_]+)$", "\\1", f)
if (!(pid %in% names(pid_dates))) {
pid_dates[[pid]] <- list()
}
if (!(date %in% names(pid_dates[[pid]]))) {
pid_dates[[pid]][[date]] <- list()
}
# Extract only the date component from the datetime column
df$date <- as.Date(df$date)
# remove in_ll column using dplyr
df <- select(df, -in_ll)
pid_dates[[pid]][[date]] <- do.call(rbind, c(pid_dates[[pid]][[date]], list(df)))
}
for (pid in names(pid_dates)) {
numeric_dates <- as.numeric(names(pid_dates[[pid]]))
sorted_indices <- order(numeric_dates)
pid_dates[[pid]] <- pid_dates[[pid]][sorted_indices]
}
View(pid_dates)
bcp.co2.mr1 <- bcp(pid_dates[['mr1']][['7']]$co2_smoothed)
plot(bcp.co2.mr1)
bcp.co2.mr1 <- bcp(pid_dates[['mr1']][['7']]$steps)
plot(bcp.co2.mr1)
bcp.co2.mr1 <- bcp(pid_dates[['mr1']][['7']]$noise_smoothed)
plot(bcp.co2.mr1)
bcp.mr1 <- bcp(pid_dates[['mr1']][['7']]$co2_smoothed)
plot(bcp.mr1)
bcp.mr1 <- bcp(pid_dates[['mr1']][['7']]$voc_smoothed)
plot(bcp.mr1)
bcp.co2.mr1 <- bcp(pid_dates[['mr1']][['7']]$steps)
plot(bcp.co2.mr1)
R.Version()
options(width=120)
Sys.setenv(OMP_NUM_THREADS=parallel::detectCores())
library(psych)
library(OpenMx)
remove.packages("OpenMx")
source('https://vipbg.vcu.edu/vipbg/OpenMx2/software/getOpenMx.R')
options(width=120)
Sys.setenv(OMP_NUM_THREADS=parallel::detectCores())
library(psych)
library(OpenMx)
options(width=120)
Sys.setenv(OMP_NUM_THREADS=parallel::detectCores())
library(psych)
library(OpenMx)
remove.packages("OpenMx")
install.packages("OpenMx")
library(OpenMx)
options(width=120)
Sys.setenv(OMP_NUM_THREADS=parallel::detectCores())
library(psych)
library(OpenMx)
mxOption(NULL, 'Number of Threads', parallel::detectCores())
latentMultipleRegExample2 <- read.csv("latentMultipleRegExample2.csv")
describe(latentMultipleRegExample2)
numberFactors <- 3
indicators <- names(latentMultipleRegExample2)
numberIndicators <- length(indicators)
totalVars <- numberIndicators + numberFactors
latents <- paste("F", 1:numberFactors, sep="")
uniqueLabels <- paste("U_", indicators, sep="")
meanLabels <- paste("M_", indicators, sep="")
factorVarLabels <- paste("Var_", latents, sep="")
factorCovLabels <- c("Cov_F1F2", "Cov_F1F3", "Cov_F2F3")
indicators1 <- indicators[1:4]
loadingLabels1 <- paste("b_F1", indicators[1:4], sep="")
indicators2 <- indicators[5:8]
loadingLabels2 <- paste("b_F2", indicators[5:8], sep="")
indicators3 <- indicators[9:12]
loadingLabels3 <- paste("b_F3", indicators[9:12], sep="")
threeLatentOrtho <- mxModel(model="threeLatentOrthogonal",
type="RAM",
manifestVars=indicators,
latentVars=latents,
mxPath(from=latents[1], to=indicators1, arrows=1, free=TRUE, values=.2, labels=loadingLabels1),
mxPath(from=latents[1], to=indicators1[1], arrows=1, free=FALSE, values=1),
mxPath(from=latents[2], to=indicators2, arrows=1, free=TRUE, values=.2, labels=loadingLabels2),
mxPath(from=latents[2], to=indicators2[1], arrows=1, free=FALSE, values=1),
mxPath(from=latents[3], to=indicators3, arrows=1, free=TRUE, values=.2, labels=loadingLabels3),
mxPath(from=latents[3], to=indicators3[1], arrows=1, free=FALSE, values=1),
mxPath(from=indicators, arrows=2, free=TRUE, values=.8, labels=uniqueLabels),
mxPath(from=latents, arrows=2, free=TRUE, values=.8, labels=factorVarLabels),
mxPath(from="one", to=indicators, arrows=1, free=TRUE, values=.1, labels=meanLabels),
mxData(observed=latentMultipleRegExample2, type="raw")
)
threeLatentOrthoOut <- mxRun(threeLatentOrtho)
tRefModel <- mxRefModels(threeLatentOrthoOut, run=TRUE)
summary(threeLatentOrthoOut, refModels=tRefModel)
options(width=120)
Sys.setenv(OMP_NUM_THREADS=parallel::detectCores())
library(psych)
library(OpenMx)
mxOption(NULL, 'Number of Threads', parallel::detectCores())
latentMultipleRegExample2 <- read.csv("latentMultipleRegExample2.csv")
describe(latentMultipleRegExample2)
numberFactors <- 3
indicators <- names(latentMultipleRegExample2)
numberIndicators <- length(indicators)
totalVars <- numberIndicators + numberFactors
latents <- paste("F", 1:numberFactors, sep="")
uniqueLabels <- paste("U_", indicators, sep="")
meanLabels <- paste("M_", indicators, sep="")
factorVarLabels <- paste("Var_", latents, sep="")
factorCovLabels <- c("Cov_F1F2", "Cov_F1F3", "Cov_F2F3")
indicators1 <- indicators[1:4]
loadingLabels1 <- paste("b_F1", indicators[1:4], sep="")
indicators2 <- indicators[5:8]
loadingLabels2 <- paste("b_F2", indicators[5:8], sep="")
indicators3 <- indicators[9:12]
loadingLabels3 <- paste("b_F3", indicators[9:12], sep="")
threeLatentOrtho <- mxModel(model="threeLatentOrthogonal",
type="RAM",
manifestVars=indicators,
latentVars=latents,
mxPath(from=latents[1], to=indicators1, arrows=1, free=TRUE, values=.2, labels=loadingLabels1),
mxPath(from=latents[1], to=indicators1[1], arrows=1, free=FALSE, values=1),
mxPath(from=latents[2], to=indicators2, arrows=1, free=TRUE, values=.2, labels=loadingLabels2),
mxPath(from=latents[2], to=indicators2[1], arrows=1, free=FALSE, values=1),
mxPath(from=latents[3], to=indicators3, arrows=1, free=TRUE, values=.2, labels=loadingLabels3),
mxPath(from=latents[3], to=indicators3[1], arrows=1, free=FALSE, values=1),
mxPath(from=indicators, arrows=2, free=TRUE, values=.8, labels=uniqueLabels),
mxPath(from=latents, arrows=2, free=TRUE, values=.8, labels=factorVarLabels),
mxPath(from="one", to=indicators, arrows=1, free=TRUE, values=.1, labels=meanLabels),
mxData(observed=latentMultipleRegExample2, type="raw")
)
threeLatentOrthoOut <- mxRun(threeLatentOrtho)
tRefModel <- mxRefModels(threeLatentOrthoOut, run=TRUE)
summary(threeLatentOrthoOut, refModels=tRefModel)
round(mxEval(A[1:numberIndicators,(numberIndicators+1):totalVars], threeLatentOrthoOut), 3)
threeLatentMediation1 <- mxModel(model=threeLatentOrtho,
mxPath(from="F2",to="F3", arrows=1, free=TRUE, values=.2, labels="b23"),
name="threeLatentMediation1"
)
threeLatentMediation1Out <- mxRun(threeLatentMediation1)
tRefModel <- mxRefModels(threeLatentMediation1Out, run=TRUE)
summary(threeLatentMediation1Out, refModels=tRefModel)
round(mxEval(A[1:numberIndicators,(numberIndicators+1):totalVars], threeLatentMediation1Out), 3)
threeLatentMediation2 <- mxModel(threeLatentMediation1,
mxPath(from="F1",to="F3", arrows=1, free=TRUE, values=.2, labels="b13"),
name="threeLatentMediation2"
)
threeLatentMediation2Out <- mxRun(threeLatentMediation2)
tRefModel <- mxRefModels(threeLatentMediation2Out, run=TRUE)
summary(threeLatentMediation2Out, refModels=tRefModel)
round(mxEval(A[1:numberIndicators,(numberIndicators+1):totalVars],
threeLatentMediation2Out), 3)
threeLatentMediation3 <- mxModel(threeLatentMediation2,
mxPath(from="F2",to="F1", arrows=1, free=TRUE, values=.2, labels="b21"),
name="threeLatentMediation3"
)
threeLatentMediation3Out <- mxRun(threeLatentMediation3)
tRefModel <- mxRefModels(threeLatentMediation3Out, run=TRUE)
summary(threeLatentMediation3Out, refModels=tRefModel)
round(mxEval(A[1:numberIndicators,(numberIndicators+1):totalVars],
threeLatentMediation3Out), 3)
threeLatentMediation4 <- mxModel(threeLatentMediation3,
mxPath(from="F2",to="F3", arrows=1, free=FALSE, values=0),
name="threeLatentMediation4"
)
threeLatentMediation4Out <- mxRun(threeLatentMediation4)
tRefModel <- mxRefModels(threeLatentMediation4Out, run=TRUE)
summary(threeLatentMediation4Out, refModels=tRefModel)
round(mxEval(A[1:numberIndicators,(numberIndicators+1):totalVars],
threeLatentMediation4Out), 3)
mxCompare(threeLatentMediation1Out, threeLatentOrthoOut)
mxCompare(threeLatentMediation2Out, threeLatentMediation1Out)
mxCompare(threeLatentMediation3Out, threeLatentMediation2Out)
mxCompare(threeLatentMediation3Out, threeLatentMediation4Out)
remove.packages("OpenMx")
source('https://vipbg.vcu.edu/vipbg/OpenMx2/software/getOpenMx.R')
install.packages(pkgs = c("OpenMx"), contriburl = contrib.url(repos, type = type), dependencies = NA, verbose = TRUE)
library(OpenMx)
R.Version()
options(width=120)
Sys.setenv(OMP_NUM_THREADS=parallel::detectCores())
library(psych)
library(OpenMx)
mxOption(NULL, 'Number of Threads', parallel::detectCores())
latentMultipleRegExample2 <- read.csv("latentMultipleRegExample2.csv")
describe(latentMultipleRegExample2)
latentMultipleRegExample2 <- read.csv("latentMultipleRegExample2.csv")
latentMultipleRegExample2 <- read.csv("latentMultipleRegExample2.csv")
setwd("~/Google Drive/Other computers/My Mac/Documents/PhD_Research/GitHub/well-being/R-analysis")
options(width=80)
Sys.setenv(OMP_NUM_THREADS=parallel::detectCores())
library(dplyr)
library(psych)
library(OpenMx)
mxOption(NULL, 'Number of Threads', parallel::detectCores())
source("GLLAfunctions.R")
# ----------------------------------
# Read the data.
data <- read.csv("padded_data_transformed2.csv")
describe(data)
dataTST <- read.csv("padded_data_transformed_TST.csv")
describe(dataTST)
manifestsX <- paste("X",1:58,sep="")
manifestsY <- paste("Y",1:58,sep="")
manifestsZ <- paste("Z",1:58,sep="")
predictorsX <- paste("X",1:57,sep="")
outcomesX <- paste("X",2:58,sep="")
predictorsY <- paste("Y",1:57,sep="")
outcomesY <- paste("Y",2:58,sep="")
predictorsZ <- paste("Z",1:57,sep="")
outcomesZ <- paste("Z",2:58,sep="")
crossModelFull <- mxModel(model = "Full_Crosslag",
type = "RAM",
manifestVars = c(manifestsX, manifestsY, manifestsZ),
mxPath(from = predictorsX, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bX"),
mxPath(from = predictorsY, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bY"),
mxPath(from = predictorsZ, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bZ"),
mxPath(from = predictorsX, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bXY"),
mxPath(from = predictorsY, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bYX"),
mxPath(from = predictorsX, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bXZ"),
mxPath(from = predictorsY, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bYZ"),
mxPath(from = predictorsZ, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bZX"),
mxPath(from = predictorsZ, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bZY"),
mxPath(from=c(manifestsX[1],manifestsY[1],manifestsZ[1]), to=c(manifestsX[1],manifestsY[1],manifestsZ[1]), arrows=2, free=TRUE, values=.2, connect="unique.bivariate"),
mxPath(from=outcomesX, arrows=2, free=TRUE, values=.8, labels="VarEX"),
mxPath(from=outcomesY, arrows=2, free=TRUE, values=.8, labels="VarEY"),
mxPath(from=outcomesZ, arrows=2, free=TRUE, values=.8, labels="VarEZ"),
mxPath(from = manifestsX[1], arrows = 2, free = TRUE, values = .5, labels = "VarX"),
mxPath(from = manifestsY[1], arrows = 2, free = TRUE, values = .5, labels = "VarY"),
mxPath(from = manifestsZ[1], arrows = 2, free = TRUE, values = .5, labels = "VarZ"),
mxPath(from = "one", to = manifestsX, arrows = 1, free = TRUE, values = 0, labels = "MeanX"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanY"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanZ"),
mxData(observed = data, type = "raw"),
mxCI(c("bX","bY","bZ","bXZ"))
)
crossModelFullOut <- mxTryHard(crossModelFull,intervals = TRUE)
# tRefModel <- mxRefModels(crossModelFullOut, run=TRUE)
summary(crossModelFullOut)
# ----------------------------------
# Read the data.
data <- read.csv("padded_data_transformed.csv")
crossModelFull <- mxModel(model = "Full_Crosslag",
type = "RAM",
manifestVars = c(manifestsX, manifestsY, manifestsZ),
mxPath(from = predictorsX, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bX"),
mxPath(from = predictorsY, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bY"),
mxPath(from = predictorsZ, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bZ"),
mxPath(from = predictorsX, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bXY"),
mxPath(from = predictorsY, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bYX"),
mxPath(from = predictorsX, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bXZ"),
mxPath(from = predictorsY, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bYZ"),
mxPath(from = predictorsZ, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bZX"),
mxPath(from = predictorsZ, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bZY"),
mxPath(from=c(manifestsX[1],manifestsY[1],manifestsZ[1]), to=c(manifestsX[1],manifestsY[1],manifestsZ[1]), arrows=2, free=TRUE, values=.2, connect="unique.bivariate"),
mxPath(from=outcomesX, arrows=2, free=TRUE, values=.8, labels="VarEX"),
mxPath(from=outcomesY, arrows=2, free=TRUE, values=.8, labels="VarEY"),
mxPath(from=outcomesZ, arrows=2, free=TRUE, values=.8, labels="VarEZ"),
mxPath(from = manifestsX[1], arrows = 2, free = TRUE, values = .5, labels = "VarX"),
mxPath(from = manifestsY[1], arrows = 2, free = TRUE, values = .5, labels = "VarY"),
mxPath(from = manifestsZ[1], arrows = 2, free = TRUE, values = .5, labels = "VarZ"),
mxPath(from = "one", to = manifestsX, arrows = 1, free = TRUE, values = 0, labels = "MeanX"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanY"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanZ"),
mxData(observed = data, type = "raw"),
mxCI(c("bX","bY","bZ","bXZ"))
)
crossModelFullOut <- mxTryHard(crossModelFull,intervals = TRUE)
# tRefModel <- mxRefModels(crossModelFullOut, run=TRUE)
summary(crossModelFullOut)
crossModelFull2 <- mxModel(model = "Full_Crosslag",
type = "RAM",
manifestVars = c(manifestsX, manifestsY, manifestsZ),
mxPath(from = predictorsX, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bX"),
mxPath(from = predictorsY, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bY"),
mxPath(from = predictorsZ, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bZ"),
mxPath(from = predictorsX, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bXY"),
mxPath(from = predictorsY, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bYX"),
mxPath(from = predictorsX, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bXZ"),
mxPath(from = predictorsY, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bYZ"),
mxPath(from = predictorsZ, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bZX"),
mxPath(from = predictorsZ, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bZY"),
mxPath(from=c(manifestsX[1],manifestsY[1],manifestsZ[1]), to=c(manifestsX[1],manifestsY[1],manifestsZ[1]), arrows=2, free=TRUE, values=.2, connect="unique.bivariate"),
mxPath(from=outcomesX, arrows=2, free=TRUE, values=.8, labels="VarEX"),
mxPath(from=outcomesY, arrows=2, free=TRUE, values=.8, labels="VarEY"),
mxPath(from=outcomesZ, arrows=2, free=TRUE, values=.8, labels="VarEZ"),
mxPath(from = manifestsX[1], arrows = 2, free = TRUE, values = .5, labels = "VarX"),
mxPath(from = manifestsY[1], arrows = 2, free = TRUE, values = .5, labels = "VarY"),
mxPath(from = manifestsZ[1], arrows = 2, free = TRUE, values = .5, labels = "VarZ"),
mxPath(from = "one", to = manifestsX, arrows = 1, free = TRUE, values = 0, labels = "MeanX"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanY"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanZ"),
mxData(observed = dataTST, type = "raw"),
mxCI(c("bX","bY","bZ","bXZ"))
)
crossModelFullOut2 <- mxTryHard(crossModelFull2,intervals = TRUE)
# tRefModel <- mxRefModels(crossModelFullOut, run=TRUE)
summary(crossModelFullOut2)
data3 <- read.csv("stress_data_crosslag.csv")
describe(data3)
crossModelFull3 <- mxModel(model = "Full_Crosslag",
type = "RAM",
manifestVars = c(manifestsX, manifestsY, manifestsZ),
mxPath(from = predictorsX, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bX"),
mxPath(from = predictorsY, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bY"),
mxPath(from = predictorsZ, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bZ"),
mxPath(from = predictorsX, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bXY"),
mxPath(from = predictorsY, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bYX"),
mxPath(from = predictorsX, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bXZ"),
mxPath(from = predictorsY, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bYZ"),
mxPath(from = predictorsZ, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bZX"),
mxPath(from = predictorsZ, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bZY"),
mxPath(from=c(manifestsX[1],manifestsY[1],manifestsZ[1]), to=c(manifestsX[1],manifestsY[1],manifestsZ[1]), arrows=2, free=TRUE, values=.2, connect="unique.bivariate"),
mxPath(from=outcomesX, arrows=2, free=TRUE, values=.8, labels="VarEX"),
mxPath(from=outcomesY, arrows=2, free=TRUE, values=.8, labels="VarEY"),
mxPath(from=outcomesZ, arrows=2, free=TRUE, values=.8, labels="VarEZ"),
mxPath(from = manifestsX[1], arrows = 2, free = TRUE, values = .5, labels = "VarX"),
mxPath(from = manifestsY[1], arrows = 2, free = TRUE, values = .5, labels = "VarY"),
mxPath(from = manifestsZ[1], arrows = 2, free = TRUE, values = .5, labels = "VarZ"),
mxPath(from = "one", to = manifestsX, arrows = 1, free = TRUE, values = 0, labels = "MeanX"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanY"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanZ"),
mxData(observed = data3, type = "raw"),
mxCI(c("bX","bY","bZ","bXZ"))
)
crossModelFullOut3 <- mxTryHard(crossModelFull3,intervals = TRUE)
# tRefModel <- mxRefModels(crossModelFullOut, run=TRUE)
summary(crossModelFullOut3)
mxCompare(crossModelFullOut, crossModelFullOut2, crossModelFullOut3)
mxCompare(crossModelFullOut, crossModelFullOut3)
# ----------------------------------
# Read the data.
data <- read.csv("padded_data_transformed.csv")
describe(data)
dataTST <- read.csv("padded_data_transformed_TST.csv")
describe(dataTST)
manifestsX <- paste("X",1:58,sep="")
manifestsY <- paste("Y",1:58,sep="")
manifestsZ <- paste("Z",1:58,sep="")
predictorsX <- paste("X",1:57,sep="")
outcomesX <- paste("X",2:58,sep="")
predictorsY <- paste("Y",1:57,sep="")
outcomesY <- paste("Y",2:58,sep="")
predictorsZ <- paste("Z",1:57,sep="")
outcomesZ <- paste("Z",2:58,sep="")
crossModelFull <- mxModel(model = "Full_Crosslag",
type = "RAM",
manifestVars = c(manifestsX, manifestsY, manifestsZ),
mxPath(from = predictorsX, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bX"),
mxPath(from = predictorsY, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bY"),
mxPath(from = predictorsZ, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bZ"),
mxPath(from = predictorsX, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bXY"),
mxPath(from = predictorsY, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bYX"),
mxPath(from = predictorsX, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bXZ"),
mxPath(from = predictorsY, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bYZ"),
mxPath(from = predictorsZ, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bZX"),
mxPath(from = predictorsZ, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bZY"),
mxPath(from=c(manifestsX[1],manifestsY[1],manifestsZ[1]), to=c(manifestsX[1],manifestsY[1],manifestsZ[1]), arrows=2, free=TRUE, values=.2, connect="unique.bivariate"),
mxPath(from=outcomesX, arrows=2, free=TRUE, values=.8, labels="VarEX"),
mxPath(from=outcomesY, arrows=2, free=TRUE, values=.8, labels="VarEY"),
mxPath(from=outcomesZ, arrows=2, free=TRUE, values=.8, labels="VarEZ"),
mxPath(from = manifestsX[1], arrows = 2, free = TRUE, values = .5, labels = "VarX"),
mxPath(from = manifestsY[1], arrows = 2, free = TRUE, values = .5, labels = "VarY"),
mxPath(from = manifestsZ[1], arrows = 2, free = TRUE, values = .5, labels = "VarZ"),
mxPath(from = "one", to = manifestsX, arrows = 1, free = TRUE, values = 0, labels = "MeanX"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanY"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanZ"),
mxData(observed = data, type = "raw"),
mxCI(c("bX","bY","bZ","bXZ"))
)
crossModelFullOut <- mxTryHard(crossModelFull,intervals = TRUE)
# tRefModel <- mxRefModels(crossModelFullOut, run=TRUE)
summary(crossModelFullOut)
crossModelFull2 <- mxModel(model = "Full_Crosslag2",
type = "RAM",
manifestVars = c(manifestsX, manifestsY, manifestsZ),
mxPath(from = predictorsX, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bX"),
mxPath(from = predictorsY, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bY"),
mxPath(from = predictorsZ, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bZ"),
mxPath(from = predictorsX, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bXY"),
mxPath(from = predictorsY, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bYX"),
mxPath(from = predictorsX, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bXZ"),
mxPath(from = predictorsY, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bYZ"),
mxPath(from = predictorsZ, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bZX"),
mxPath(from = predictorsZ, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bZY"),
mxPath(from=c(manifestsX[1],manifestsY[1],manifestsZ[1]), to=c(manifestsX[1],manifestsY[1],manifestsZ[1]), arrows=2, free=TRUE, values=.2, connect="unique.bivariate"),
mxPath(from=outcomesX, arrows=2, free=TRUE, values=.8, labels="VarEX"),
mxPath(from=outcomesY, arrows=2, free=TRUE, values=.8, labels="VarEY"),
mxPath(from=outcomesZ, arrows=2, free=TRUE, values=.8, labels="VarEZ"),
mxPath(from = manifestsX[1], arrows = 2, free = TRUE, values = .5, labels = "VarX"),
mxPath(from = manifestsY[1], arrows = 2, free = TRUE, values = .5, labels = "VarY"),
mxPath(from = manifestsZ[1], arrows = 2, free = TRUE, values = .5, labels = "VarZ"),
mxPath(from = "one", to = manifestsX, arrows = 1, free = TRUE, values = 0, labels = "MeanX"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanY"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanZ"),
mxData(observed = dataTST, type = "raw"),
mxCI(c("bX","bY","bZ","bXZ"))
)
crossModelFullOut2 <- mxTryHard(crossModelFull2,intervals = TRUE)
# tRefModel <- mxRefModels(crossModelFullOut, run=TRUE)
summary(crossModelFullOut2)
# X = "REM:nREM", Y = "steps_std", Z = "stress"
data3 <- read.csv("stress_data_crosslag.csv")
describe(data3)
crossModelFull3 <- mxModel(model = "Full_Crosslag3",
type = "RAM",
manifestVars = c(manifestsX, manifestsY, manifestsZ),
mxPath(from = predictorsX, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bX"),
mxPath(from = predictorsY, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bY"),
mxPath(from = predictorsZ, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bZ"),
mxPath(from = predictorsX, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bXY"),
mxPath(from = predictorsY, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bYX"),
mxPath(from = predictorsX, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bXZ"),
mxPath(from = predictorsY, to = outcomesZ, arrows = 1, free = TRUE, values = .2, labels = "bYZ"),
mxPath(from = predictorsZ, to = outcomesX, arrows = 1, free = TRUE, values = .2, labels = "bZX"),
mxPath(from = predictorsZ, to = outcomesY, arrows = 1, free = TRUE, values = .2, labels = "bZY"),
mxPath(from=c(manifestsX[1],manifestsY[1],manifestsZ[1]), to=c(manifestsX[1],manifestsY[1],manifestsZ[1]), arrows=2, free=TRUE, values=.2, connect="unique.bivariate"),
mxPath(from=outcomesX, arrows=2, free=TRUE, values=.8, labels="VarEX"),
mxPath(from=outcomesY, arrows=2, free=TRUE, values=.8, labels="VarEY"),
mxPath(from=outcomesZ, arrows=2, free=TRUE, values=.8, labels="VarEZ"),
mxPath(from = manifestsX[1], arrows = 2, free = TRUE, values = .5, labels = "VarX"),
mxPath(from = manifestsY[1], arrows = 2, free = TRUE, values = .5, labels = "VarY"),
mxPath(from = manifestsZ[1], arrows = 2, free = TRUE, values = .5, labels = "VarZ"),
mxPath(from = "one", to = manifestsX, arrows = 1, free = TRUE, values = 0, labels = "MeanX"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanY"),
mxPath(from = "one", to = manifestsY, arrows = 1, free = TRUE, values = 0, labels = "MeanZ"),
mxData(observed = data3, type = "raw"),
mxCI(c("bX","bY","bZ","bXZ"))
)
crossModelFullOut3 <- mxTryHard(crossModelFull3,intervals = TRUE)
# tRefModel <- mxRefModels(crossModelFullOut, run=TRUE)
summary(crossModelFullOut3)
mxCompare(crossModelFullOut, crossModelFullOut3)
